import "strings"
import "types"

outputs = {}

_modules = {
	"root": {
		"data": {
			"google_kms_crypto_key": {
				"cryptokey-1": {
					0: {
						"attr": {
							"destroy_scheduled_duration": "86400s",
							"id":                            "projects/modular-scout-345114/locations/us-central1/keyRings/keyring-1/cryptoKeys/cryptokey-1",
							"import_only":                   false,
							"key_ring":                      "projects/modular-scout-345114/locations/us-central1/keyRings/keyring-1",
							"labels":                        {},
							"name":                          "cryptokey-1",
							"purpose":                       "ENCRYPT_DECRYPT",
							"rotation_period":               "7776000s",
							"skip_initial_version_creation": null,
							"version_template": [
								{
									"algorithm":        "GOOGLE_SYMMETRIC_ENCRYPTION",
									"protection_level": "SOFTWARE",
								},
							],
						},
						"depends_on": [],
						"id":         "projects/modular-scout-345114/locations/us-central1/keyRings/keyring-1/cryptoKeys/cryptokey-1",
						"tainted":    false,
					},
				},
			},
			"google_kms_key_ring": {
				"keyring-1": {
					0: {
						"attr": {
							"id":       "projects/modular-scout-345114/locations/us-central1/keyRings/keyring-1",
							"location": "us-central1",
							"name":     "keyring-1",
							"project":  "modular-scout-345114",
						},
						"depends_on": [],
						"id":         "projects/modular-scout-345114/locations/us-central1/keyRings/keyring-1",
						"tainted":    false,
					},
				},
			},
		},
		"path":      [],
		"resources": {},
	},
}

module_paths = [
	[],
]

terraform_version = "1.2.3"

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources
